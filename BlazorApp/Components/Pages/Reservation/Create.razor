@page "/reservations/create"
@inject IReservationService reservationService
@inject ICustomerService customerService
@inject ITableService tableService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div style="
    background: linear-gradient(135deg, #fff8dc, #ffeeba);
    border-radius: 12px;
    padding: 30px;
    width: 40%;
    margin: 80px auto;
    box-shadow: 0 4px 12px rgba(218, 165, 32, 0.3);
    color: #333;
">

    <h2 style="text-align: center; margin-bottom: 20px;">Create New Reservation</h2>

    <EditForm Model="reservation" OnSubmit="ReservationCreate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label>Customer:</label>
        <InputSelect @bind-Value="reservation.CustomerId" class="form-control mb-3">
            <option value="">-- Select Customer --</option>
            @foreach (var c in customers)
            {
                <option value="@c.Id">@c.FullName</option>
            }
        </InputSelect>

        <label>Table:</label>
        <InputSelect @bind-Value="reservation.TableId" class="form-control mb-3">
            <option value="">-- Select Table --</option>
            @foreach (var t in tables)
            {
                <option value="@t.Id">Table â„–@t.Number (Seats: @t.Seats)</option>
            }
        </InputSelect>

        <label>From Date and Time:</label>
        <InputText @bind-Value="fromDateString" type="datetime-local" class="form-control mb-3" />

        <label>To Date and Time:</label>
        <InputText @bind-Value="toDateString" type="datetime-local" class="form-control mb-3" />

        <div style="display: flex; justify-content: space-between;">
            <button type="submit" class="btn btn-success" style="min-width: 100px;">Create</button>
            <a href="/reservations" class="btn btn-secondary" style="min-width: 100px;">Cancel</a>
        </div>
    </EditForm>
</div>

@code {
    CreateReservationDTO reservation = new();

    List<GetCustomerDTO> customers = new();
    List<GetTableDTO> tables = new();

    string? fromDateString
    {
        get => reservation.FromDate == default ? null : reservation.FromDate.ToString("yyyy-MM-ddTHH:mm");
        set
        {
            if (DateTime.TryParse(value, out var dt))
                reservation.FromDate = dt;
        }
    }

    string? toDateString
    {
        get => reservation.ToDate == default ? null : reservation.ToDate.ToString("yyyy-MM-ddTHH:mm");
        set
        {
            if (DateTime.TryParse(value, out var dt))
                reservation.ToDate = dt;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var customerResponse = await customerService.GetCustomersAsync();
        customers = customerResponse.Data ?? new List<GetCustomerDTO>();

        var tableResponse = await tableService.GetTablesAsync();
        tables = tableResponse.Data ?? new List<GetTableDTO>();
    }

    async Task ReservationCreate()
    {
        Console.WriteLine("ReservationCreate called");

        var response = await reservationService.AddReservationAsync(reservation);

        if (!response.IsSuccess)
        {
            Navigation.NavigateTo("/reservations/error");
            return;
        }

        Navigation.NavigateTo("/reservations");
    }
}
